{"mappings":"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","sources":["js/painterApp.js","js/drawingClasses.js","js/exporter.js","js/utilites.js","js/canvasPainter.js","js/microGrid.js","js/vector2.js","js/collision_detection.js"],"sourcesContent":["import { DrawingData, DrawingDatabase } from './drawingClasses.js';\nimport { Exporter } from './exporter.js';\nimport { CanvasPainter } from './canvasPainter.js';\nimport { MicroGrid } from './microGrid.js';\nimport { mouseToCanvas, HSVtoRGBString, hexFromRGBCache } from './utilites.js';\nimport { Vector2 } from './vector2.js';\n\nimport { lineIntersectsRect, lineCircle } from './collision_detection.js';\n\n\n\n\nexport class PainterApp{\n\n  canvasIdName = \"\";\n  grid = null;\n  gridCount = 0;\n  brushSize = 1;\n  resolution = 400;\n  gridUnit = 2*14; // change the second var\n  drawingsDatabase = null;\n  drawingData = null; // drawingData_a;\n  canvas = null;\n  canvasPainter = null;\n  ctx = null;\n  IS_DOWN = false;\n  clientRect = null;\n  currentColor = null;\n  currentColorHex = \"#0000ff\";\n  // 0: previous, 1: current\n  autoFillMousePositions = [new Vector2(), new Vector2()];\n  \n  exporter = null;\n  importer = null;\n  \n  drawings = new DrawingDatabase();\n\n  constructor(params){\n    \n    const {\n      brushSize, resolution, gridUnit, canvasIdName,\n      currentColorHex = \"#0000ff\"\n    } = params;\n    \n    this.brushSize = brushSize;\n    this.resolution = resolution;\n    this.gridUnit = gridUnit;\n    this.canvasIdName = canvasIdName;\n    this.currentColorHex = currentColorHex;\n    \n    \n    this.gridCount = gridUnit ** 2;\n    // after this gridUnit is not used again, grid.unit should be the bases, but needs refactor\n    \n    this.grid = new MicroGrid({unit: gridUnit, \n      width: resolution, height: resolution, \n      count: this.gridCount \n    })//.computeRowsColumns(resolution, resolution);\n    \n    this.drawingData = new DrawingData(this.grid.unit);\n    \n    this.setupCanvas();\n    \n    this.canvasPainter = new CanvasPainter({\n      canvas: this.canvas, \n      context: this.ctx, \n      grid: this.grid, \n      width: this.grid.width, \n      height: this.grid.height\n    });\n    \n    \n    this.exporter = new Exporter();\n    \n  } // constructor\n\n  \n  drawFill_222(ev){\n    \n    \n    // mouseToCanvas(ev,autoFillMousePositions[0]);\n    mouseToCanvas(ev,this.autoFillMousePositions[1], this.clientRect);\n    \n    const start = this.autoFillMousePositions[0];\n    const stop = this.autoFillMousePositions[1];\n    \n    const grid = this.grid;\n    \n    // ovo.ctx.fillStyle = '#eeaa00';\n    // ovo.ctx.beginPath(mouseDown.x, mouseDown.y); // Start a new path\n    // ovo.ctx.moveTo(mouseDown.x, mouseDown.y); // Move the pen to (30, 50)\n    // ovo.ctx.lineTo(mouse.x, mouse.y); // Draw a line to (150, 100)\n    // ovo.ctx.lineWidth = 1;\n      \n    // ovo.ctx.stroke(); // Render the path\n    // debugger\n    for (var i = 0; i < grid.count; i++) {\n      let vv = grid.getRectAtIndex(i);\n      // console.log(vv);\n      \n      // let gg = lineIntersectsRect(start.x, start.y, stop.x, stop.y, vv.min.x, vv.min.y, vv.width, vv.height);\n      \n      // let dis = gg.position.distanceTo();\n      // lineCircle(x1, y1, x2, y2, cx, cy, r)\n      // console.log(\"vv.position\", vv.position);\n      // console.log(vv);\n      // console.log(\"vv.min\", vv.min);\n      // console.log(\"vv.max\", vv.max);\n      \n      // we need the charatristic of the line to allow diagonol points\n      // so circle testing gives this\n      // Otherwise the line work is a bit heavier cause its failsafing in stepping style\n      // Also note the scalar on radius gives a cheap brush size effect\n      // let brushSize = 1.5;\n      \n      let isInCircle = lineCircle(start.x, start.y, stop.x, stop.y, vv.position.x, vv.position.y, vv.radius * this.brushSize);\n      // console.log(\"isInCircle\", isInCircle);\n      if(isInCircle){\n      // if(gg === true && isInCircle){\n      // if(gg === true){\n        // debugger\n        this.canvasPainter.drawAtIndex(i, grid.unit, grid.width, grid.height, this.ctx, this.currentColorHex);\n        this.drawingData.table[i] = 1;\n      }\n    }\n    \n    this.autoFillMousePositions[0].copy(this.autoFillMousePositions[1]);\n  }\n\n\n  \n\n  setupCanvas() {\n    \n    this.canvas = document.getElementById(this.canvasIdName);\n    this.ctx = this.canvas.getContext(\"2d\");\n    \n    this.clientRect = this.canvas.getBoundingClientRect();\n    \n    const canvas = this.canvas;\n    const ctx = this.ctx;\n    const resolution = this.resolution;\n    const grid = this.grid;\n    \n    canvas.width = this.grid.width;\n    canvas.height = this.grid.height;\n\n    // this.ctx.imageSmoothingEnabled= false\n    // this.ctx.globalCompositeOperation = \"destination-out\"\n\n\n    // for offscreen stuff\n    this.canvasBuffer = document.createElement('canvas');\n    this.canvasBuffer.width = resolution;\n    this.canvasBuffer.height = resolution;\n    this.ctxBuffer = this.canvasBuffer.getContext(\"2d\");\n\n    \n    // ctx.fillStyle = \"#0000ff\";\n    ctx.fillStyle = HSVtoRGBString(Math.random(),1,1);\n    // ctx.fillRect(0,0,390, 20);\n    ctx.fillRect(0,0,resolution, resolution);\n\n    console.log(\"¿\");\n\n\n    let yy = -1;\n    let xx = 0;\n    for (var rr = 0; rr < grid.count; rr++) {\n      \n      let xx = grid.width/grid.unit*rr % grid.width;\n      // console.log(xx);\n      // console.log(width/gridUnit*(rr+1));\n      // console.log(\"=========\");\n      if (xx === 0) {\n        yy++;\n      }\n      let y = grid.height/grid.unit*yy % grid.height;\n      // console.log(rr/gridCount);\n      // ctx.fillStyle = HSVtoRGBString(0.2,1,rr/gridCount);\n      ctx.fillStyle = HSVtoRGBString(Math.random(),1,1);\n      // we know colorVector was updated\n      this.drawingData.assignColor(rr, hexFromRGBCache() );\n      \n      // ctx.fillRect(xx, y, gridUnit, gridUnit);\n      ctx.fillRect(xx, y, grid.size.x, grid.size.y);\n    \n    }\n      \n    \n  } // setupCanvas\n\n  // handles drawing and database fixing\n  clearScreen_CM(color = '#eeeeee'){\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(0, 0, this.resolution, this.resolution);\n    \n    this.canvasPainter.drawGuides();\n    this.drawingData.clearTable();\n  }\n\n  saveToFileAsDataSize(){\n    this.exporter.saveToFileAsDataSize(this.grid, this.drawingData);\n  }\n  saveToFile(){\n    this.exporter.saveToFile(this.canvas);\n  }\n  generateDataImage(){\n    const img = this.exporter.generateDataImage(this.grid, this.drawingData.table);\n    if(img){\n      this.drawings.add(this.drawingData.table.slice());\n      // this was for data about the letter, ex: letter a\n      // this.drawings.addSorted(letterinput.value, drawingData.table.slice())\n    }\n    return img;\n  }\n  // does this require a full class instance????\n  // importer class really\n  exportData(jsonstring){\n    const yy = {\n      dataarray: this.drawingData.table.slice(),\n      gridUnit : this.grid.unit,\n      gridCount : this.grid.count,\n      resolution : this.resolution\n    }\n    if(jsonstring){\n      return JSON.stringify(yy);\n    }\n    return yy;\n  }\n  // used for postgres type of database saving and loading\n  generateDataImageFromDatabase(data){\n    const gg = new MicroGrid({unit: data.gridUnit, \n      width: data.resolution, height: data.resolution, \n      count: data.gridCount\n    });\n    const img = this.exporter.generateDataImage(gg, data.dataarray);\n    return img;\n  }\n  \n  \n}\n","\n\n\n\n// database system\nexport class DrawingData{\n  constructor(gridUnit){\n    this.unit = gridUnit;\n    let len = gridUnit**2;\n    this.colors = [len];\n    this.cache = [len];\n    this.table = [len];\n    for (var i = 0; i < len; i++) {\n      this.table[i] = 0;\n    }\n  }\n  assignColor(index, color){\n    // this would become a .copy()\n    this.colors[index] = color;\n  }\n  clearTable(){\n    for (var i = 0; i < this.table.length; i++) {\n      this.table[i] = 0;\n    }\n  }\n  setTableVal(index,val){\n    this.table[index] = val;\n  }\n}\n\n// \n// holds array data of drawings\n// could be a CheapPool but dont have that file in here\nexport class DrawingDatabase {\n  all = [];\n  sorted = {};\n  add(item){\n    this.all.push(item);\n  }\n  addSorted(key, item){\n    if( ! this.sorted.hasOwnProperty(key) ){\n      this.sorted[key] = [];\n    }\n    this.sorted[key].push(item);\n    this.add(item);\n  }\n  export(all = false){\n    let yy = {sorted:{}};\n    // JSON.stringify(drawings.sorted)\n  }\n}\n","\n\nimport { HSVtoRGBString } from './utilites.js';\n\nexport class Exporter{\n  // \n  // grid = null;\n  // drawingData = null;\n  // \n  \n  // canvas = null;\n  \n  words = [\"fish\", \"tacos\", \"the_over_malrg\", \"within\", \"upon\", \n  \"mices\", \"ourealy\", \"could_this_be\", \"well_houdy_then\", \"gradprix\", \n  \"apples\", \"oranges\", \"cash\", \"NFT_NFT\" ];\n\n  constructor(){\n    \n  }\n\n  randomWord(){\n    return this.words[Math.floor((Math.random()*this.words.length))];\n  }\n  \n  \n  canvasToData(canvas){\n    let downloadLink = document.createElement('a');\n    var title = \"NFT\" + \"_\" + this.randomWord() + \"_\" + this.randomWord();\n    downloadLink.setAttribute('download', title+'.png');\n    let dataURL = canvas.toDataURL('image/png');\n    return {dataURL:dataURL, downloadLink:downloadLink};\n  }\n  \n  // saves the painted png at its original resolution\n  // https://stackoverflow.com/questions/11112321/how-to-save-canvas-as-png-image\n  saveToFile(canvas) {\n    \n    let dataUp = this.canvasToData(canvas);\n    \n    let url = dataUp.dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\n    dataUp.downloadLink.setAttribute('href', url);\n    dataUp.downloadLink.click();\n    \n  }\n\n\n\n  // saves the file at whatever the grid size is\n  // so its tiny really, can be used as a database\n  // https://stackoverflow.com/questions/11112321/how-to-save-canvas-as-png-image\n  saveToFileAsDataSize(grid, drawingData) {\n    \n    \n    let xLim = grid.unit;\n    let yLim = grid.unit;\n    \n    // ovo.canvasBuffer = document.createElement('canvas');\n    this.canvas = document.createElement('canvas');\n    const canvas = this.canvas;\n    \n    canvas.width = xLim;\n    canvas.height = yLim;\n    let context = canvas.getContext(\"2d\");\n        \n    let width = xLim;\n    let height = yLim;\n    \n\n    console.log(grid.unit, xLim, yLim, canvas.width,canvas.height);\n    \n    context.fillStyle = HSVtoRGBString(Math.random(),1,1);\n    context.fillRect(0, 0, width, height);\n\n    let x=0;\n    let y=0;\n    \n    for (var i = 0; i < grid.count; i++) {\n      // grid.unit\n      let val = drawingData.table[i];\n      let bb = grid.getColRowIndexes(i);\n      let color = \"#ffffff\";\n    \n      if (val === 1){\n        color = \"#000000\";\n      }\n      // drawAtIndex(i, 4, width, height, context, \"#000000\")\n      let col = bb[0];\n      let row = bb[1];\n    \n      // let sizeX = width/gridUnit;\n      // let sizeY = height/gridUnit;\n    \n      // let x = grid.unit * row % xLim;\n      // let y = grid.unit * col % yLim;\n      context.fillStyle = color;\n      context.fillRect(x, y, 1, 1);\n      \n      x++;\n      if(x===grid.unit){\n        x = 0;\n        y++;\n      }\n    \n    }\n\n    let dataUp = this.canvasToData(canvas);\n    \n    let url = dataUp.dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\n    dataUp.downloadLink.setAttribute('href', url);\n    dataUp.downloadLink.click();\n    \n  }\n\n\n\n  // makes an image and adds to the drawingsIN array\n  // https://stackoverflow.com/questions/11112321/how-to-save-canvas-as-png-image\n  // generateDataImage(grid, drawingData, drawingsIN) {\n  generateDataImage(grid, drawingDataArray) {\n    \n    \n    // canvas.toBlob(function(blob) {\n    //     saveAs(blob, \"pretty image.png\");\n    // });\n    // let grid = ovo.grid;\n\n    let xLim = grid.unit;\n    let yLim = grid.unit;\n    \n    // ovo.canvasBuffer = document.createElement('canvas');\n    // let canvas = document.createElement('canvas');\n    this.canvas = document.createElement('canvas');\n    const canvas = this.canvas;\n    canvas.width = xLim;\n    canvas.height = yLim;\n    let context = canvas.getContext(\"2d\");\n\n    let width = xLim;\n    let height = yLim;\n\n    // console.log(grid.unit, xLim, yLim, canvas.width,canvas.height);\n    \n    context.fillStyle = HSVtoRGBString(Math.random(),1,1);\n    context.fillRect(0, 0, width, height);\n\n    \n    let x=0;\n    let y=0;\n    for (var i = 0; i < grid.count; i++) {\n      // grid.unit\n      // let val = drawingData.table[i];\n      let val = drawingDataArray[i];\n      let bb = grid.getColRowIndexes(i);\n      let color = \"#ffffff\";\n    \n      if (val === 1){\n        color = \"#000000\";\n      }\n      \n      let col = bb[0];\n      let row = bb[1];\n\n      context.fillStyle = color;\n      context.fillRect(x, y, 1, 1);\n      \n      x++;\n      if(x===grid.unit){\n        x = 0;\n        y++;\n      }\n    \n    }\n\n    let dataUp = this.canvasToData(canvas);\n    \n    const img = document.createElement('img');\n    img.src = dataUp.dataURL;\n    \n    return img;\n    \n  }\n\n\n\n}\n","\n\nexport function lerp( x, y, t ) {\n  return ( 1 - t ) * x + t * y;\n}\n\n\n\n\nconst colorVector = {r:0,g:0,b:0};\n\n\nexport function HSVtoRGB(h, s, v, vector) {\n  // if using 256 color space\n  // HSVtoRGB(i/256,1,1, colorVector);\n  // ctx.fillStyle = `rgb(${colorVector.r},${colorVector.g},${colorVector.b})`;\n\n  var r, g, b, i, f, p, q, t;\n  if (arguments.length === 1) {\n      s = h.s, v = h.v, h = h.h;\n  }\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n      case 0: r = v, g = t, b = p; break;\n      case 1: r = q, g = v, b = p; break;\n      case 2: r = p, g = v, b = t; break;\n      case 3: r = p, g = q, b = v; break;\n      case 4: r = t, g = p, b = v; break;\n      case 5: r = v, g = p, b = q; break;\n  }\n  vector.r = Math.round(r * 255);\n  vector.g = Math.round(g * 255);\n  vector.b = Math.round(b * 255);\n  \n}\n\n\nexport function HSVtoRGBString(h,s,v){\n  // returns 255 space vector string\n  \n  HSVtoRGB(h,s,v,colorVector);\n  return `rgb(${colorVector.r},${colorVector.g},${colorVector.b})`;\n}\n\n\n\n// function getColorAtMouse(context, mouse) {\n// \n//   var rect = context.canvas.getBoundingClientRect();\n//   var p = context.getImageData(mouse.x - rect.x, mouse.y - rect.y, 1, 1).data; \n//   var hex = (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\n//   // $('#status').html(coord + \"<br>\" + hex);\n//   // console.log(\"hex\", hex);\n//   return hex;\n// }\n\n// its in 255 space\n// a = (\"000000\" + rgbToHex(100,255,2)).slice(-6);\n\nexport function rgbToHex(r, g, b) {\n    if (r > 255 || g > 255 || b > 255)\n        throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\n// ???\nexport function hexFromRGBCache(){\n  return (\"000000\" + rgbToHex(colorVector.r,colorVector.g,colorVector.b)).slice(-6);\n}\n\n\nexport function mouseToCanvas(ev,vectorIn,clientRect) {\n  vectorIn.x=ev.clientX-clientRect.left;\n  vectorIn.y=ev.clientY-clientRect.top;\n}\n\n\nexport function randomHexString(size = 6){\n  let result = [];\n  let hexRef = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n  for (let n = 0; n < size; n++) {\n    result.push(hexRef[Math.floor(Math.random() * 16)]);\n  }\n  return \"#\"+result.join('');\n}\n","\n\n// this handles painting the canvas element\n// does not hold data\n\n\nexport class CanvasPainter{\n  constructor({canvas, context, grid, width, height}){\n    this.canvas = canvas;\n    this.context = context;\n    this.grid = grid;\n    this.width = width;\n    this.height = height;\n  }\n  \n  // drawAtIndex_CM({index, gridUnit, width, height, context, color}) {\n  drawAtIndex(index, color=\"#aa00ff\") {\n\n    let bb = this.grid.getColRowIndexes(index);\n    \n    // console.log(\"pre count\", ciiy*gridCount);\n    \n    // drawAtIndex_ColRow(bb[0], bb[1], gridUnit, width, height, context, color);\n    this.drawAtIndex_ColRow({col:bb[0], row:bb[1], color});\n\n  }\n\n  // drawAtIndex_ColRow(col, row, gridUnit, width, height, context, color) {\n  drawAtIndex_ColRow({col, row, color}) {\n    const width = this.width;\n    const height = this.height;\n    const gridUnit = this.grid.unit;\n    const context = this.context;\n    let sizeX = width/gridUnit;\n    let sizeY = height/gridUnit;\n    let x = width/gridUnit * row % width;\n    let y = height/gridUnit * col % height;\n    context.fillStyle = color;\n    context.fillRect(x, y, sizeX, sizeY);\n  }\n\n  // redrawCanvasWithData({width, height, gridUnit, context, dataIn}) {\n  redrawCanvasWithData(dataIn) {\n    const width = this.width;\n    const height = this.height;\n    const gridUnit = this.grid.unit;\n    const context = this.context;\n    \n    // let width = resolution;\n    // let height = resolution;\n    let sizeX = width/gridUnit;\n    let sizeY = height/gridUnit;\n    let gridCount = gridUnit ** 2;\n    \n    // we just step the grid instead of nested loops\n    let yy = -1;\n    let xx = 0;\n    for (var rr = 0; rr < gridCount; rr++) {\n      \n      let xx = width/gridUnit*rr % width;\n      if (xx === 0) {\n        yy++;\n      }\n      let y = height/gridUnit*yy % height;\n      context.fillStyle = `#${dataIn[rr]}`;\n      // we know colorVector was updated\n      context.fillRect(xx, y, sizeX, sizeY);\n    }\n    \n  }\n\n\n\n  drawGuides() {\n    const ctx = this.context;\n    const grid = this.grid;\n    ctx.strokeStyle = '#aaaaaa';\n    ctx.beginPath(grid.width/2, 0); // Start a new path\n    ctx.moveTo(grid.width/2, 0); // Move the pen to (30, 50)\n    ctx.lineTo(grid.width/2, grid.height); // Draw a line to (150, 100)\n    ctx.lineWidth = 1;\n    ctx.stroke(); // Render the path\n    \n    ctx.beginPath(0, grid.height/2); // Start a new path\n    ctx.moveTo(0, grid.height/2); // Move the pen to (30, 50)\n    ctx.lineTo(grid.width, grid.height/2); // Draw a line to (150, 100)\n    ctx.lineWidth = 1;\n    ctx.stroke(); // Render the path\n    \n  }\n}\n","\n\nimport {Vector2} from './vector2.js';\n\nexport class MicroGrid{\n  \n  // unit shoudl be size really\n  constructor( {unit = 4, width = 40, height = 40, power = 2, count} = {} ) {\n    this.unit = unit;\n    this.width = width;\n    this.height = height;\n    this.size = new Vector2(width/unit, height/unit);\n    this.count = count || unit ** power;\n    // this.count = count;\n    \n    // this.rows = rows;\n    // this.columns = columns;\n  }\n  reflow({unit,width,height,power,count}={}){\n    \n  }\n\n  // raise each row col index 1 to handle 0 index\n  // for every row we have say gridUnit 8\n  // minus the remainder for the total for a row\n  // 2 * 8 - (8-7)\n  // let atIndex = ( (iiy + 1) * gridUnit ) - (gridUnit - iix);\n  // console.log(\"atIndex\", atIndex);\n  \n  // col is y, row is x\n  // 0 : col, 1: row\n  _colRow = [-1,-1];\n  getColRowIndexes(index, gridUnit){\n    let unit = gridUnit || this.unit;\n    // debugger\n    let col = Math.floor(index/unit);\n    // console.log(\"col\", col);\n    let row = Math.floor( index - ( col*unit ) );\n    this._colRow[0] = col;\n    this._colRow[1] = row;\n    return this._colRow;\n  }\n  \n  // from a vector2 like a mouse, return the index from the flat array\n  getIndexAtMouse(mouse){\n    const gridUnit = this.unit;\n    let iix = Math.max(0, Math.floor((mouse.x)/this.width*gridUnit) );\n    let iiy = Math.max(0, Math.floor((mouse.y)/this.height*gridUnit) );\n    \n    // console.log(iix, iiy);\n    \n    // raise each row col index 1 to handle 0 index\n    // for ever row we have gridUnit 8\n    // minus the remainder for the total for a row\n    // 2 * 8 - (8-7)\n    \n    let atIndex = ( (iiy + 1) * gridUnit ) - (gridUnit - iix);\n    \n    return atIndex;\n  }\n  \n  \n  _rect = { min:new Vector2(), max:new Vector2(), width:0,height:0, position:new Vector2(), center:new Vector2(), radius: 0  }\n  \n  // min max and position are in world space\n  // center is local\n  getRectAtIndex(index){\n    let indexes = this.getColRowIndexes(index);\n    // console.log(indexes);\n    let rect = this._rect;\n    \n    rect.width = this.width/this.unit;\n    rect.height = this.height/this.unit;\n    \n    rect.min.x = rect.width * indexes[1];\n    rect.min.y = rect.height * indexes[0];\n    \n    rect.max.x = rect.min.x + rect.width;\n    rect.max.y = rect.min.y + rect.height;\n    \n    rect.position.x = rect.max.x - (rect.width / 2);\n    rect.position.y = rect.max.y - (rect.height / 2);\n    \n    rect.center.x = rect.width / 2;\n    rect.center.y = rect.height / 2;\n    \n    rect.radius = rect.width / 2;\n    \n    // console.log(indexes);\n    // console.log(rect);\n    // debugger\n    return rect;\n    \n  }\n\n\n\n\n\n}\n","\n\nfunction clamp(val, min, max) {\n  return Math.max(min, Math.min(val, max));\n}\n\nexport class Vector2{\n  \n  x = 0; y = 0;\n  \n  constructor(x = 0, y = 0){\n    this.x = x; this.y = y;\n  }\n  // \n  // copy(vector){\n  // \n  // }\n  \n  dot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n  // this was in Vector3\n  angleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n  \n  set(x,y){\n    this.x = x; this.y = y;\n    return this;\n  }\n  \n  add(v){\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n  \n  sub(v){\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n  \n  copy(v){\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n  \n  multiplyScalar(val){\n    this.x *= val;\n    this.y *= val;\n    return this;\n  }\n  \n  rotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y; // they dont -s here gonna add it in cause thats stupid\n\n\t\treturn this;\n\n\t}\n  \n  \n  addScalar(val){\n    this.x += val;\n    this.y += val;\n    return this;\n  }\n  \n  divideScalar(val){\n    this.x /= val;\n    this.y /= val;\n    return this;\n  }\n  \n  \n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n  \n  clone(){\n    return new Vector2().copy(this);\n  }\n  \n  addVectors(){\n    \n  }\n  \n  equals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y )  );\n\n\t}\n  \n  clampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n  \n  divideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n  \n  negate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n  \n  multiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n  \n  lengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n  \n  normalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n  \n}\n","\n\n//  From https://www.jeffreythompson.org/collision-detection/license.php\n// for book from jeffreythompson\n// https://www.jeffreythompson.org/collision-detection/line-rect.php\n// \n\n// LINE/RECTANGLE\n// export function lineRect(float x1, float y1, float x2, float y2, float rx, float ry, float rw, float rh) {\nexport function lineIntersectsRect(x1, y1, x2, y2, rx, ry, rw, rh) {\n\n  // check if the line has hit any of the rectangle's sides\n  // uses the Line/Line function below\n  let left   = lineLine(x1,y1,x2,y2, rx,ry,rx, ry+rh);\n  let right  = lineLine(x1,y1,x2,y2, rx+rw,ry, rx+rw,ry+rh);\n  let top    = lineLine(x1,y1,x2,y2, rx,ry, rx+rw,ry);\n  let bottom = lineLine(x1,y1,x2,y2, rx,ry+rh, rx+rw,ry+rh);\n\n  // if ANY of the above are true, the line\n  // has hit the rectangle\n  if (left || right || top || bottom) {\n    return true;\n  }\n  return false;\n}\n\n\n// LINE/LINE\nexport function lineLine(x1, y1, x2, y2, x3, y3, x4, y4) {\n\n  // calculate the direction of the lines\n  let uA = ((x4-x3)*(y1-y3) - (y4-y3)*(x1-x3)) / ((y4-y3)*(x2-x1) - (x4-x3)*(y2-y1));\n  let uB = ((x2-x1)*(y1-y3) - (y2-y1)*(x1-x3)) / ((y4-y3)*(x2-x1) - (x4-x3)*(y2-y1));\n\n  // if uA and uB are between 0-1, lines are colliding\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n\n    // // optionally, draw a circle where the lines meet\n    // let intersectionX = x1 + (uA * (x2-x1));\n    // let intersectionY = y1 + (uA * (y2-y1));\n    // fill(255,0,0);\n    // noStroke();\n    // ellipse(intersectionX, intersectionY, 20, 20);\n\n    return true;\n  }\n  return false;\n}\n\n\n\n/// https://www.jeffreythompson.org/collision-detection/line-circle.php\n// LINE/CIRCLE\nexport function lineCircle(x1, y1, x2, y2, cx, cy, r) {\n\n  // is either end INSIDE the circle?\n  // if so, return true immediately\n  const inside1 = pointCircle(x1,y1, cx,cy,r);\n  const inside2 = pointCircle(x2,y2, cx,cy,r);\n  if (inside1 || inside2) return true;\n\n  // get length of the line\n  let distX = x1 - x2;\n  let distY = y1 - y2;\n  const len = Math.sqrt( (distX*distX) + (distY*distY) );\n\n  // get dot product of the line and circle\n  const dot = ( ((cx-x1)*(x2-x1)) + ((cy-y1)*(y2-y1)) ) / Math.pow(len,2);\n\n  // find the closest point on the line\n  const closestX = x1 + (dot * (x2-x1));\n  const closestY = y1 + (dot * (y2-y1));\n\n  // is this point actually on the line segment?\n  // if so keep going, but if not, return false\n  const onSegment = linePoint(x1,y1,x2,y2, closestX,closestY);\n  if (!onSegment) return false;\n\n  // // optionally, draw a circle at the closest\n  // // point on the line\n  // fill(255,0,0);\n  // noStroke();\n  // ellipse(closestX, closestY, 20, 20);\n\n  // get distance to closest point\n  distX = closestX - cx;\n  distY = closestY - cy;\n  const distance = Math.sqrt( (distX*distX) + (distY*distY) );\n\n  if (distance <= r) {\n    return true;\n  }\n  return false;\n}\n\nfunction dist(x1, y1, x2, y2){\n  let distX = x1 - x2;\n  let distY = y1 - y2;\n  return Math.sqrt( (distX*distX) + (distY*distY) );\n}\n\n// LINE/POINT\nexport function linePoint(x1, y1, x2, y2, px, py) {\n\n  // get distance from the point to the two ends of the line\n  const d1 = dist(px,py, x1,y1);\n  const d2 = dist(px,py, x2,y2);\n\n  // get the length of the line\n  const lineLen = dist(x1,y1, x2,y2);\n\n  // since floats are so minutely accurate, add\n  // a little buffer zone that will give collision\n  const buffer = 0.1;    // higher # = less accurate\n\n  // if the two distances are equal to the line's\n  // length, the point is on the line!\n  // note we use the buffer here to give a range,\n  // rather than one #\n  if (d1+d2 >= lineLen-buffer && d1+d2 <= lineLen+buffer) {\n    return true;\n  }\n  return false;\n}\n\n\n// POINT/CIRCLE\nexport function pointCircle(px, py, cx, cy, r) {\n\n  // get distance between the point and circle's center\n  // using the Pythagorean Theorem\n  let distX = px - cx;\n  let distY = py - cy;\n  let distance = Math.sqrt( (distX*distX) + (distY*distY) );\n\n  // if the distance is less than the circle's\n  // radius the point is inside!\n  if (distance <= r) {\n    return true;\n  }\n  return false;\n}\n"],"names":[],"version":3,"file":"painterAppModule.2.0.js.map"}